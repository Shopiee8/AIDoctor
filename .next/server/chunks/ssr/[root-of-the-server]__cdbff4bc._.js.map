{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI({apiKey: process.env.GOOGLE_API_KEY})],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;YAAC,QAAQ,QAAQ,GAAG,CAAC,cAAc;QAAA;KAAG;IACzD,OAAO;AACT","debugId":null}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/medical-terms.ts"],"sourcesContent":["\n/**\n * @fileOverview A list of medical terms for the AI to reference.\n */\n\nexport const medicalTerms = [\n  // High-Risk Symptoms - These trigger an automatic referral\n  { english: 'Chest Pain', arabic: 'ألم في الصدر', category: 'High-Risk' },\n  { english: 'Shortness of Breath', arabic: 'ضيق في التنفس', category: 'High-Risk' },\n  { english: 'Severe Headache', arabic: 'صداع شديد', category: 'High-Risk' },\n  { english: 'Loss of Consciousness', arabic: 'فقدان الوعي', category: 'High-Risk' },\n  { english: 'Severe Abdominal Pain', arabic: 'ألم شديد في البطن', category: 'High-Risk' },\n\n  // General Symptoms\n  { english: 'Headache', arabic: 'صداع', category: 'General' },\n  { english: 'Fever', arabic: 'حمى', category: 'General' },\n  { english: 'Cough', arabic: 'سعال', category: 'General' },\n  { english: 'Dizziness', arabic: 'دوخة', category: 'General' },\n  { english: 'Nausea', arabic: 'غثيان', category: 'General' },\n  { english: 'Vomiting', arabic: 'قيء', category: 'Gastrointestinal' },\n  { english: 'Diarrhea', arabic: 'إسهال', category: 'Gastrointestinal' },\n  { english: 'Constipation', arabic: 'إمساك', category: 'Gastrointestinal' },\n  { english: 'Insomnia', arabic: 'أرق', category: 'Neurological' },\n  { english: 'Abdominal Pain', arabic: 'ألم في البطن', category: 'Gastrointestinal' },\n  \n  // Body Parts\n  { english: 'Head', arabic: 'رأس', category: 'Body Part' },\n  { english: 'Chest', arabic: 'صدر', category: 'Body Part' },\n  { english: 'Abdomen', arabic: 'بطن', category: 'Body Part' },\n  { english: 'Back', arabic: 'ظهر', category: 'Body Part' },\n  { english: 'Hand', arabic: 'يد', category: 'Body Part' },\n  { english: 'Leg', arabic: 'رجل', category: 'Body Part' },\n  { english: 'Eye', arabic: 'عين', category: 'Body Part' },\n  { english: 'Ear', arabic: 'أذن', category: 'Body Part' },\n  { english: 'Nose', arabic: 'أنف', category: 'Body Part' },\n  { english: 'Mouth', arabic: 'فم', category: 'Body Part' },\n\n  // Time Expressions\n  { english: 'since an hour ago', arabic: 'منذ ساعة', category: 'Time' },\n  { english: 'since yesterday', arabic: 'منذ يوم', category: 'Time' },\n  { english: 'since a week ago', arabic: 'منذ أسبوع', category: 'Time' },\n  { english: 'now', arabic: 'الآن', category: 'Time' },\n  { english: 'this morning', arabic: 'صباح اليوم', category: 'Time' },\n];\n"],"names":[],"mappings":"AACA;;CAEC;;;AAEM,MAAM,eAAe;IAC1B,2DAA2D;IAC3D;QAAE,SAAS;QAAc,QAAQ;QAAgB,UAAU;IAAY;IACvE;QAAE,SAAS;QAAuB,QAAQ;QAAiB,UAAU;IAAY;IACjF;QAAE,SAAS;QAAmB,QAAQ;QAAa,UAAU;IAAY;IACzE;QAAE,SAAS;QAAyB,QAAQ;QAAe,UAAU;IAAY;IACjF;QAAE,SAAS;QAAyB,QAAQ;QAAqB,UAAU;IAAY;IAEvF,mBAAmB;IACnB;QAAE,SAAS;QAAY,QAAQ;QAAQ,UAAU;IAAU;IAC3D;QAAE,SAAS;QAAS,QAAQ;QAAO,UAAU;IAAU;IACvD;QAAE,SAAS;QAAS,QAAQ;QAAQ,UAAU;IAAU;IACxD;QAAE,SAAS;QAAa,QAAQ;QAAQ,UAAU;IAAU;IAC5D;QAAE,SAAS;QAAU,QAAQ;QAAS,UAAU;IAAU;IAC1D;QAAE,SAAS;QAAY,QAAQ;QAAO,UAAU;IAAmB;IACnE;QAAE,SAAS;QAAY,QAAQ;QAAS,UAAU;IAAmB;IACrE;QAAE,SAAS;QAAgB,QAAQ;QAAS,UAAU;IAAmB;IACzE;QAAE,SAAS;QAAY,QAAQ;QAAO,UAAU;IAAe;IAC/D;QAAE,SAAS;QAAkB,QAAQ;QAAgB,UAAU;IAAmB;IAElF,aAAa;IACb;QAAE,SAAS;QAAQ,QAAQ;QAAO,UAAU;IAAY;IACxD;QAAE,SAAS;QAAS,QAAQ;QAAO,UAAU;IAAY;IACzD;QAAE,SAAS;QAAW,QAAQ;QAAO,UAAU;IAAY;IAC3D;QAAE,SAAS;QAAQ,QAAQ;QAAO,UAAU;IAAY;IACxD;QAAE,SAAS;QAAQ,QAAQ;QAAM,UAAU;IAAY;IACvD;QAAE,SAAS;QAAO,QAAQ;QAAO,UAAU;IAAY;IACvD;QAAE,SAAS;QAAO,QAAQ;QAAO,UAAU;IAAY;IACvD;QAAE,SAAS;QAAO,QAAQ;QAAO,UAAU;IAAY;IACvD;QAAE,SAAS;QAAQ,QAAQ;QAAO,UAAU;IAAY;IACxD;QAAE,SAAS;QAAS,QAAQ;QAAM,UAAU;IAAY;IAExD,mBAAmB;IACnB;QAAE,SAAS;QAAqB,QAAQ;QAAY,UAAU;IAAO;IACrE;QAAE,SAAS;QAAmB,QAAQ;QAAW,UAAU;IAAO;IAClE;QAAE,SAAS;QAAoB,QAAQ;QAAa,UAAU;IAAO;IACrE;QAAE,SAAS;QAAO,QAAQ;QAAQ,UAAU;IAAO;IACnD;QAAE,SAAS;QAAgB,QAAQ;QAAc,UAAU;IAAO;CACnE","debugId":null}},
    {"offset": {"line": 397, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/consultation-flow.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview The core logic for the AI Doctor consultation.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'zod';\nimport { medicalTerms } from './medical-terms';\n\n// Define the structure for a single turn in the conversation\nconst ConsultationTurnSchema = z.object({\n  role: z.enum(['user', 'model']),\n  content: z.string(),\n  isReferral: z.boolean().optional().describe('Set to true if this is a referral message.'),\n  referralReason: z.string().optional().describe('The reason for the referral.'),\n});\nexport type ConsultationTurn = z.infer<typeof ConsultationTurnSchema>;\n\n// The input for the flow will be the conversation history\nconst ConsultationInputSchema = z.object({\n    history: z.array(ConsultationTurnSchema),\n    terms: z.array(z.any()),\n});\nexport type ConsultationInput = z.infer<typeof ConsultationInputSchema>;\n\n// The output will be the AI's next turn\nconst ConsultationOutputSchema = ConsultationTurnSchema;\nexport type ConsultationOutput = z.infer<typeof ConsultationOutputSchema>;\n\n// Define the AI prompt\nconst consultationPrompt = ai.definePrompt({\n  name: 'consultationPrompt',\n  input: { schema: ConsultationInputSchema },\n  output: { schema: ConsultationOutputSchema },\n  prompt: `You are an empathetic and professional AI Doctor. Your goal is to assess a patient's symptoms and provide basic medical advice. You must communicate in the same language as the user (English or Arabic).\n\n  Conversation History:\n  {{#each history}}\n  - {{role}}: {{content}}\n  {{/each}}\n  \n  Medical Terminology Reference (both English and Arabic):\n  {{#each terms}}\n  - {{english}}: {{arabic}} ({{category}})\n  {{/each}}\n\n  Your tasks:\n  1.  Analyze the user's latest message for medical symptoms using the provided terminology list.\n  2.  Ask clarifying questions to understand the symptom's severity, duration, and nature. (e.g., \"I understand you have a headache. Is it severe or mild? When did it start?\").\n  3.  **Referral Rule:** If the user mentions any \"High-Risk\" symptom (like 'chest pain', 'shortness of breath', 'severe headache', 'loss of consciousness'), you MUST immediately refer them to a human doctor. Your response must be ONLY a new model turn with the 'isReferral' flag set to true, and a 'referralReason'. The content should be something like: \"Based on the symptoms you've described, it's important to speak with a human doctor immediately. I am connecting you now.\"\n  4.  Provide simple, safe, evidence-based advice for non-high-risk symptoms.\n  5.  Maintain a caring and professional tone.\n  6.  Keep your responses concise.\n  7.  Return ONLY your single new response as a model turn. Do not return the whole history.\n  `,\n});\n\n// Define the main flow\nexport const consultationFlow = ai.defineFlow(\n  {\n    name: 'consultationFlow',\n    inputSchema: z.array(ConsultationTurnSchema),\n    outputSchema: z.array(ConsultationTurnSchema),\n  },\n  async (history) => {\n    // If history is empty, return the initial greeting\n    if (history.length === 0) {\n      const initialTurn: ConsultationTurn = {\n          role: 'model',\n          content: \"Hello, I'm your AI Doctor. How can I help you today? Please describe your symptoms.\",\n        };\n      return [initialTurn];\n    }\n    \n    // Check for high-risk terms in the latest user message\n    const latestUserMessage = history[history.length - 1]?.content.toLowerCase() || '';\n    const highRiskTerms = medicalTerms.filter(t => t.category === 'High-Risk');\n\n    for (const term of highRiskTerms) {\n        if (latestUserMessage.includes(term.english.toLowerCase()) || latestUserMessage.includes(term.arabic)) {\n            const referralTurn: ConsultationTurn = {\n                role: 'model',\n                content: `Symptoms like '${term.english}' can be serious. It is important to speak with a human doctor for a full evaluation. I will connect you now.`,\n                isReferral: true,\n                referralReason: `Patient reported high-risk symptom: ${term.english}. Immediate referral required.`,\n            };\n            return [...history, referralTurn];\n        }\n    }\n\n    // If no high-risk terms, proceed with the standard AI prompt\n    const { output } = await consultationPrompt({\n        history,\n        terms: medicalTerms,\n    });\n\n    if (output) {\n      return [...history, output];\n    }\n\n    // Fallback if the AI fails to generate a response\n    return history;\n  }\n);\n"],"names":[],"mappings":";;;;;AAGA;;CAEC,GAED;AACA;AACA;;;;;;;AAEA,6DAA6D;AAC7D,MAAM,yBAAyB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtC,MAAM,oIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAQ;KAAQ;IAC9B,SAAS,oIAAA,CAAA,IAAC,CAAC,MAAM;IACjB,YAAY,oIAAA,CAAA,IAAC,CAAC,OAAO,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC5C,gBAAgB,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AACjD;AAGA,0DAA0D;AAC1D,MAAM,0BAA0B,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrC,SAAS,oIAAA,CAAA,IAAC,CAAC,KAAK,CAAC;IACjB,OAAO,oIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,oIAAA,CAAA,IAAC,CAAC,GAAG;AACxB;AAGA,wCAAwC;AACxC,MAAM,2BAA2B;AAGjC,uBAAuB;AACvB,MAAM,qBAAqB,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IACzC,MAAM;IACN,OAAO;QAAE,QAAQ;IAAwB;IACzC,QAAQ;QAAE,QAAQ;IAAyB;IAC3C,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;EAoBT,CAAC;AACH;AAGO,MAAM,mBAAmB,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC3C;IACE,MAAM;IACN,aAAa,oIAAA,CAAA,IAAC,CAAC,KAAK,CAAC;IACrB,cAAc,oIAAA,CAAA,IAAC,CAAC,KAAK,CAAC;AACxB,GACA,OAAO;IACL,mDAAmD;IACnD,IAAI,QAAQ,MAAM,KAAK,GAAG;QACxB,MAAM,cAAgC;YAClC,MAAM;YACN,SAAS;QACX;QACF,OAAO;YAAC;SAAY;IACtB;IAEA,uDAAuD;IACvD,MAAM,oBAAoB,OAAO,CAAC,QAAQ,MAAM,GAAG,EAAE,EAAE,QAAQ,iBAAiB;IAChF,MAAM,gBAAgB,sIAAA,CAAA,eAAY,CAAC,MAAM,CAAC,CAAA,IAAK,EAAE,QAAQ,KAAK;IAE9D,KAAK,MAAM,QAAQ,cAAe;QAC9B,IAAI,kBAAkB,QAAQ,CAAC,KAAK,OAAO,CAAC,WAAW,OAAO,kBAAkB,QAAQ,CAAC,KAAK,MAAM,GAAG;YACnG,MAAM,eAAiC;gBACnC,MAAM;gBACN,SAAS,CAAC,eAAe,EAAE,KAAK,OAAO,CAAC,6GAA6G,CAAC;gBACtJ,YAAY;gBACZ,gBAAgB,CAAC,oCAAoC,EAAE,KAAK,OAAO,CAAC,8BAA8B,CAAC;YACvG;YACA,OAAO;mBAAI;gBAAS;aAAa;QACrC;IACJ;IAEA,6DAA6D;IAC7D,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,mBAAmB;QACxC;QACA,OAAO,sIAAA,CAAA,eAAY;IACvB;IAEA,IAAI,QAAQ;QACV,OAAO;eAAI;YAAS;SAAO;IAC7B;IAEA,kDAAkD;IAClD,OAAO;AACT;;;IA5CW;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 518, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/dashboard/consultation/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {consultationFlow as '7f45c5fb287b9224ad61f0470223b244f5596d1690'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 576, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/consultation/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/consultation/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/consultation/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA2S,GACxU,yEACA","debugId":null}},
    {"offset": {"line": 590, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/consultation/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/consultation/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/consultation/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAuR,GACpT,qDACA","debugId":null}},
    {"offset": {"line": 604, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}