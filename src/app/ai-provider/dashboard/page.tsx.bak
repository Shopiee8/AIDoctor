'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { useSession } from 'next-auth/react';
import { getAIProvider, getAIDoctorsByProvider } from '@/lib/firebase/providerService';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Skeleton } from '@/components/ui/skeleton';
import { PlusCircle, Users, Activity, Star, LayoutDashboard, MessageSquare, FileText, Settings, LogOut } from 'lucide-react';
import { ModernSidebar, ModernSidebarBody, ModernSidebarLink } from '@/components/ui/modern-sidebar';
import { cn } from '@/lib/utils';

// Define types for our data
interface AIProvider {
  id: string;
  organizationName: string;
  // Add other provider properties as needed
}

interface AIDoctor {
  id: string;
  name: string;
  specialty: string;
  isActive: boolean;
  rating?: number;
  metadata?: {
    totalConsultations?: number;
    totalPatients?: number;
    [key: string]: any;
  };
  [key: string]: any; // For any additional properties
}

// Helper function to get initials from name
function getInitials(name: string) {
  if (!name) return '';
  return name
    .split(' ')
    .map(part => part[0] || '')
    .join('')
    .toUpperCase()
    .substring(0, 2);
}

function DashboardContent() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const [provider, setProvider] = useState<AIProvider | null>(null);
  const [doctors, setDoctors] = useState<AIDoctor[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchData = async () => {
      if (status === 'unauthenticated') {
        router.push('/login');
        return;
      }

      if (status === 'authenticated' && session?.user?.email) {
        try {
          const providerData = await getAIProvider(session.user.email);
          if (providerData) {
            setProvider(providerData);
            setError(null);
          } else {
            throw new Error('Provider data not found');
          }
        } catch (err) {
          console.error('Error fetching data:', err);
          setError('Failed to load dashboard data. Please try again later.');
        } finally {
          setIsLoading(false);
        }
      }
    };

    if (status === 'authenticated') {
      fetchData();
    }
  }, [status, router, session?.user?.email]);

  if (status === 'loading' || isLoading) {
    return <DashboardSkeleton />;
  }

  if (error) {
    return (
      <div className="space-y-6">
        <div className="rounded-lg border border-destructive p-4 text-destructive">
          <h2 className="text-lg font-semibold">Error Loading Dashboard</h2>
          <p>We couldn't load your dashboard. Please try refreshing the page.</p>
          <p className="text-sm mt-2">Error: {error}</p>
        </div>
      </div>
    );
  }

  if (!provider) {
    return (
      <div className="space-y-6">
        <div className="rounded-lg border border-destructive p-4 text-destructive">
          <h2 className="text-lg font-semibold">Provider Not Found</h2>
          <p>We couldn't find your provider information. Please contact support.</p>
        </div>
      </div>
    );
  }

  if (!provider) {
    // Show a message and a button to become a provider
    return (
      <div className="flex flex-col items-center justify-center min-h-[60vh] text-center p-6">
        <div className="max-w-md space-y-6">
          <h1 className="text-3xl font-bold tracking-tight">Welcome to AI Provider Dashboard</h1>
          <p className="text-muted-foreground">
            You're not registered as an AI provider yet. Click the button below to get started.
          </p>
          <Button asChild>
            <Link href="/dashboard/become-provider">
              Become an AI Provider
            </Link>
          </Button>
        </div>
      </div>
    );
  }

  // Fetch AI doctors data
  useEffect(() => {
    if (!provider) return;
    
    const fetchAiDoctors = async () => {
      try {
        const doctorsData = await getAIDoctorsByProvider(provider.id);
        setDoctors(doctorsData);
      } catch (err) {
        console.error('Error fetching AI doctors:', err);
        setError('Failed to load AI doctors');
      }
    };

    fetchAiDoctors();
  }, [provider?.id]);

  // Calculate total stats across all AI doctors
  const totalStats = doctors.reduce(
    (acc, doctor) => ({
      totalConsultations: acc.totalConsultations + (doctor.metadata?.totalConsultations || 0),
      totalPatients: acc.totalPatients + (doctor.metadata?.totalPatients || 0),
      totalRating: acc.totalRating + (doctor.rating || 0),
      activeDoctors: acc.activeDoctors + (doctor.isActive ? 1 : 0),
    }),
    { totalConsultations: 0, totalPatients: 0, totalRating: 0, activeDoctors: 0 }
  );

  const averageRating = doctors.length > 0 
    ? (totalStats.totalRating / doctors.length).toFixed(1) 
    : '0';

    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold tracking-tight">Welcome back, {provider.organizationName || 'Provider'}</h1>
          <p className="text-muted-foreground">
            Here's what's happening with your AI doctors today.
          </p>
        </div>
        <Link href="/dashboard/ai-provider/doctors/new">
          <Button>
            <PlusCircle className="mr-2 h-4 w-4" />
            New AI Doctor
          </Button>
        </Link>
      </div>

      {/* Stats Grid */}
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Active AI Doctors
            </CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{totalStats.activeDoctors}</div>
            <p className="text-xs text-muted-foreground">
              {doctors.length} total
            </p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Consultations</CardTitle>
            <Activity className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{totalStats.totalConsultations}</div>
            <p className="text-xs text-muted-foreground">
              All time consultations
            </p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Average Rating</CardTitle>
            <Star className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{averageRating}<span className="text-sm text-muted-foreground">/5</span></div>
            <p className="text-xs text-muted-foreground">
              Across all AI doctors
            </p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Patients</CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{totalStats.totalPatients}</div>
            <p className="text-xs text-muted-foreground">
              Unique patients served
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Recent Activity & AI Doctors List */}
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-7">
        <Card className="col-span-4">
          <CardHeader>
            <CardTitle>Your AI Doctors</CardTitle>
            <CardDescription>
              {doctors.length === 0 
                ? "You don't have any AI doctors yet. Create your first one!" 
                : `You have ${doctors.length} AI doctors`}
            </CardDescription>
          </CardHeader>
          <CardContent>
            {doctors.length > 0 ? (
              <div className="space-y-4">
                {doctors.map((doctor) => (
                  <div key={doctor.id} className="flex items-center justify-between p-4 border rounded-lg hover:bg-accent/50 transition-colors">
                    <div className="flex items-center space-x-4">
                      <div className="h-12 w-12 rounded-full bg-primary/10 flex items-center justify-center">
                        <span className="text-lg font-semibold text-primary">{getInitials(doctor.name)}</span>
                      </div>
                      <div>
                        <h3 className="font-medium">{doctor.name}</h3>
                        <p className="text-sm text-muted-foreground">{doctor.specialty}</p>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2">
                      <span className={`px-2 py-1 text-xs rounded-full ${doctor.isActive ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}`}>
                        {doctor.isActive ? 'Active' : 'Inactive'}
                      </span>
                      <Link href={`/ai-provider/doctors/${doctor.id}`}>
                        <Button variant="outline" size="sm">
                          Manage
                        </Button>
                      </Link>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="flex flex-col items-center justify-center py-12 text-center">
                <Users className="h-12 w-12 text-muted-foreground mb-4" />
                <h3 className="text-lg font-medium mb-1">No AI doctors yet</h3>
                <p className="text-sm text-muted-foreground mb-4">
                  Get started by creating your first AI doctor.
                </p>
                <Link href="/ai-provider/doctors/new">
                  <Button>
                    <PlusCircle className="mr-2 h-4 w-4" />
                    New AI Doctor
                  </Button>
                </Link>
              </div>
            )}
          </CardContent>
        </Card>
        
        <Card className="col-span-3">
          <CardHeader>
            <CardTitle>Recent Activity</CardTitle>
            <CardDescription>Latest consultations and updates</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {doctors.length > 0 ? (
                doctors.slice(0, 3).map((doctor) => (
                  <div key={doctor.id} className="space-y-2">
                    <h4 className="text-sm font-medium">{doctor.name}</h4>
                    <div className="text-sm text-muted-foreground">
                      {doctor.metadata?.lastActive ? (
                        <p>Last active: {new Date(doctor.metadata.lastActive).toLocaleDateString()}</p>
                      ) : (
                        <p>No recent activity</p>
                      )}
                      <p>{doctor.metadata?.totalConsultations || 0} total consultations</p>
                    </div>
                  </div>
                ))
              ) : (
                <div className="text-center py-8 text-muted-foreground">
                  <p>No activity yet</p>
                  <p className="text-sm">Your AI doctors' activity will appear here</p>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

// Loading skeleton component
function DashboardSkeleton() {
  return (
    <div className="space-y-6">
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4 mb-8">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Total AI Doctors
            </CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <Skeleton className="h-8 w-12 mb-1" />
            <Skeleton className="h-4 w-32" />
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Total Consultations
            </CardTitle>
            <Activity className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <Skeleton className="h-8 w-12 mb-1" />
            <Skeleton className="h-4 w-32" />
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Average Rating
            </CardTitle>
            <Star className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <Skeleton className="h-8 w-12 mb-1" />
            <Skeleton className="h-4 w-32" />
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Active Patients
            </CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <Skeleton className="h-8 w-12 mb-1" />
            <Skeleton className="h-4 w-32" />
          </CardContent>
        </Card>
      </div>

      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-7">
        <Card className="col-span-4">
          <CardHeader>
            <CardTitle>Recent Activity</CardTitle>
            <Skeleton className="h-4 w-48" />
          </CardHeader>
          <CardContent className="space-y-4">
            {[1, 2, 3, 4, 5].map((i) => (
              <div key={i} className="flex items-center p-4 border rounded-lg">
                <Skeleton className="h-10 w-10 rounded-full mr-4" />
                <div className="flex-1 space-y-2">
                  <Skeleton className="h-4 w-3/4" />
                  <Skeleton className="h-3 w-1/2" />
                </div>
                <Skeleton className="h-4 w-16" />
              </div>
            ))}
          </CardContent>
        </Card>

        <Card className="col-span-3">
          <CardHeader>
            <CardTitle>Your AI Doctors</CardTitle>
            <Skeleton className="h-4 w-32" />
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {[1, 2, 3].map((i) => (
                <div key={i} className="flex items-center justify-between p-3 border rounded-lg">
                  <div className="flex items-center space-x-3">
                    <Skeleton className="h-10 w-10 rounded-full" />
                    <div className="space-y-1">
                      <Skeleton className="h-4 w-24" />
                      <Skeleton className="h-3 w-20" />
                    </div>
                  </div>
                  <Skeleton className="h-8 w-16" />
                </div>
              ))}
              <Skeleton className="h-9 w-full mt-2" />
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
